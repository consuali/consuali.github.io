{"ast":null,"code":"import * as i0 from \"@angular/core\";\n/*\n  Variables to be used outside of directive scope\n  To improve performance.\n*/\nconst TAU = Math.PI * 2;\nconst QUADTREE_CAPACITY = 4;\nlet linkBatches = 10;\nlet mouse = {\n  x: 0,\n  y: 0\n};\n/*\n  Variables to be initiated\n*/\nlet linkDistance;\nlet linkDistance2;\nlet repulseDistance;\nlet particleSpeed;\nlet particleSize;\nlet bounce;\nlet quadTree;\nlet canvas;\nlet ctx;\nexport class ParticlesDirective {\n  constructor(el) {\n    this.el = el;\n    this.number = 80;\n    this.speed = 6;\n    this.linkWidth = .5;\n    this.linkDistance = 140;\n    this.size = 3;\n    this.repulseDistance = 140;\n    this.particleHex = \"#FFF\";\n    this.linkHex = \"#FFF\";\n    this.bounce = true;\n    this.densityArea = 800;\n    this.particlesList = [];\n    this.links = [];\n    this.linkBatchAlphas = [];\n    this.linkPool = [];\n    this.candidates = [];\n    canvas = this.el.nativeElement;\n    canvas.style.height = \"100%\";\n    canvas.style.width = \"100%\";\n    ctx = canvas.getContext(\"2d\");\n    for (var i = 1 / (linkBatches + 1); i < 1; i += 1 / (linkBatches + 1)) {\n      this.links.push([]);\n      this.linkBatchAlphas.push(i);\n    }\n    this.setCanvasSize();\n    this.initVariables();\n  }\n  ngOnInit() {\n    this.animate();\n  }\n  onResize() {\n    this.setCanvasSize();\n  }\n  onMouseLeave() {\n    this.stopMouse();\n  }\n  onTouchEnd() {\n    this.stopMouse();\n  }\n  onMouseMove(e) {\n    this.setMousePos(e.offsetX, e.offsetY);\n  }\n  onTouchMove(e) {\n    this.setMousePos(e.touches[0].clientX, e.touches[0].clientY);\n  }\n  ngOnChanges() {\n    this.initVariables();\n    this.resetParticles();\n  }\n  setMousePos(x, y) {\n    mouse.x = x;\n    mouse.y = y;\n  }\n  stopMouse() {\n    mouse.x = null;\n  }\n  initVariables() {\n    linkDistance = this.linkDistance;\n    linkDistance2 = (0.7 * linkDistance) ** 2;\n    repulseDistance = this.repulseDistance;\n    particleSpeed = this.speed;\n    particleSize = this.size;\n    bounce = this.bounce;\n    if (this.densityArea) this.scaleDensity();\n  }\n  animate() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    this.updateParticles();\n    this.updateLinks();\n    this.animationFrame = requestAnimationFrame(this.animate.bind(this));\n  }\n  updateParticles() {\n    quadTree.close();\n    ctx.fillStyle = this.particleHex;\n    ctx.beginPath();\n    for (const p of this.particlesList) p.update(ctx, true);\n    ctx.fill();\n  }\n  updateLinks() {\n    let i;\n    let link;\n    let alphaIdx = 0;\n    for (const p1 of this.particlesList) {\n      p1.explored = true;\n      const count = quadTree.query(p1, 0, this.candidates);\n      for (i = 0; i < count; i++) {\n        const p2 = this.candidates[i];\n        if (!p2.explored) {\n          link = this.linkPool.length ? this.linkPool.pop() : new Link();\n          link.init(p1, p2);\n          this.links[link.batchId].push(link);\n        }\n      }\n    }\n    ctx.lineWidth = this.linkWidth;\n    ctx.strokeStyle = this.linkHex;\n    for (const l of this.links) {\n      ctx.globalAlpha = this.linkBatchAlphas[alphaIdx++];\n      ctx.beginPath();\n      while (l.length) this.linkPool.push(l.pop().addPath(ctx));\n      ctx.stroke();\n    }\n    ctx.globalAlpha = 1;\n  }\n  resetParticles() {\n    this.particlesList = [];\n    for (let i = 0; i < this.particlesNumber; i++) {\n      this.particlesList.push(new Particle(canvas, particleSize));\n    }\n    quadTree = new QuadTree();\n    for (const p of this.particlesList) p.reset(canvas);\n  }\n  scaleDensity() {\n    var area = canvas.width * canvas.height / 1000;\n    this.particlesNumber = area * this.number / this.densityArea | 0;\n  }\n  setCanvasSize() {\n    canvas.height = canvas.offsetHeight;\n    canvas.width = canvas.offsetWidth;\n    if (this.densityArea) this.scaleDensity();\n    this.resetParticles();\n  }\n  ngOnDestroy() {\n    cancelAnimationFrame(this.animationFrame);\n  }\n  static #_ = this.ɵfac = function ParticlesDirective_Factory(t) {\n    return new (t || ParticlesDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ParticlesDirective,\n    selectors: [[\"\", \"repulse-particles\", \"\"]],\n    hostBindings: function ParticlesDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"resize\", function ParticlesDirective_resize_HostBindingHandler() {\n          return ctx.onResize();\n        }, false, i0.ɵɵresolveWindow)(\"mouseleave\", function ParticlesDirective_mouseleave_HostBindingHandler() {\n          return ctx.onMouseLeave();\n        })(\"touchend\", function ParticlesDirective_touchend_HostBindingHandler() {\n          return ctx.onTouchEnd();\n        })(\"mousemove\", function ParticlesDirective_mousemove_HostBindingHandler($event) {\n          return ctx.onMouseMove($event);\n        })(\"touchmove\", function ParticlesDirective_touchmove_HostBindingHandler($event) {\n          return ctx.onTouchMove($event);\n        })(\"change\", function ParticlesDirective_change_HostBindingHandler() {\n          return ctx.ngOnChanges();\n        });\n      }\n    },\n    inputs: {\n      number: \"number\",\n      speed: \"speed\",\n      linkWidth: \"linkWidth\",\n      linkDistance: \"linkDistance\",\n      size: \"size\",\n      repulseDistance: \"repulseDistance\",\n      particleHex: \"particleHex\",\n      linkHex: \"linkHex\",\n      bounce: \"bounce\",\n      densityArea: \"densityArea\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\nclass Link {\n  constructor() {}\n  init(p1, p2) {\n    this.p1 = p1;\n    this.p2 = p2;\n    const dx = p1.x - p2.x;\n    const dy = p1.y - p2.y;\n    this.alpha = 1 - (dx * dx + dy * dy) / linkDistance2;\n    this.batchId = this.alpha * linkBatches | 0;\n    this.batchId = this.batchId >= linkBatches ? linkBatches : this.batchId;\n  }\n  addPath(ctx) {\n    ctx.moveTo(this.p1.x, this.p1.y);\n    ctx.lineTo(this.p2.x, this.p2.y);\n    return this;\n  }\n}\nclass Particle {\n  constructor(canvas, r) {\n    this.r = r;\n    this.speedScale = particleSpeed / 2;\n    this.reset(canvas, r);\n  }\n  reset(canvas, r = this.r) {\n    const W = canvas.width - r * 2;\n    const H = canvas.height - r * 2;\n    this.x = Math.random() * W + r;\n    this.y = Math.random() * H + r;\n    this.vx = Math.random() - 0.5;\n    this.vy = Math.random() - 0.5;\n    this.quad = undefined;\n    this.explored = false;\n  }\n  addPath(ctx) {\n    ctx.moveTo(this.x + this.r, this.y);\n    ctx.arc(this.x, this.y, this.r, 0, TAU);\n  }\n  near(p) {\n    return (p.x - this.x) ** 2 + (p.y - this.y) ** 2 <= linkDistance2;\n  }\n  intersects(range) {\n    const xd = Math.abs(range.x - this.x);\n    const yd = Math.abs(range.y - this.y);\n    const r = linkDistance;\n    const w = range.w;\n    const h = range.h;\n    if (xd > r + w || yd > r + h) {\n      return false;\n    }\n    if (xd <= w || yd <= h) {\n      return true;\n    }\n    return (xd - w) ** 2 + (yd - h) ** 2 <= linkDistance2;\n  }\n  update(ctx, repulse = true) {\n    this.explored = false;\n    const r = this.r;\n    let W, H;\n    this.x += this.vx * this.speedScale;\n    this.y += this.vy * this.speedScale;\n    if (bounce) {\n      W = ctx.canvas.width - r;\n      H = ctx.canvas.height - r;\n      if (this.x > W || this.x < 0) {\n        this.vx = -this.vx;\n      }\n      if (this.y > H || this.y < 0) {\n        this.vy = -this.vy;\n      }\n    } else {\n      W = ctx.canvas.width + r;\n      H = ctx.canvas.height + r;\n      if (this.x > W) {\n        this.x = 0;\n        this.y = Math.random() * (H - r);\n      } else if (this.x < -r) {\n        this.x = W - r;\n        this.y = Math.random() * (H - r);\n      }\n      if (this.y > H) {\n        this.y = 0;\n        this.x = Math.random() * (W - r);\n      } else if (this.y < -r) {\n        this.y = H - r;\n        this.x = Math.random() * (W - r);\n      }\n    }\n    repulse && mouse.x && this.repulse();\n    this.addPath(ctx);\n    quadTree.insert(this);\n    this.quad && (this.quad.drawn = false);\n  }\n  repulse() {\n    var dx = this.x - mouse.x;\n    var dy = this.y - mouse.y;\n    const dist = (dx * dx + dy * dy) ** 0.5;\n    var rf = (1 - (dist / repulseDistance) ** 2) * 100;\n    rf = (rf < 0 ? 0 : rf > 50 ? 50 : rf) / dist;\n    var posX = this.x + dx * rf;\n    var posY = this.y + dy * rf;\n    if (bounce) {\n      if (posX - particleSize > 0 && posX + particleSize < canvas.width) this.x = posX;\n      if (posY - particleSize > 0 && posY + particleSize < canvas.height) this.y = posY;\n    } else {\n      this.x = posX;\n      this.y = posY;\n    }\n  }\n}\nclass Bounds {\n  constructor(x, y, w, h) {\n    this.init(x, y, w, h);\n  }\n  init(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.left = x - w;\n    this.right = x + w;\n    this.top = y - h;\n    this.bottom = y + h;\n    this.diagonal = w * w + h * h;\n  }\n  contains(p) {\n    return p.x >= this.left && p.x <= this.right && p.y >= this.top && p.y <= this.bottom;\n  }\n  near(p) {\n    if (!this.contains(p)) {\n      const dx = p.x - this.x;\n      const dy = p.y - this.y;\n      const dist = dx * dx + dy * dy - this.diagonal - linkDistance2;\n      return dist < 0;\n    }\n    return true;\n  }\n}\nclass QuadTree {\n  constructor(boundary = new Bounds(canvas.width / 2, canvas.height / 2, canvas.width / 2, canvas.height / 2), depth = 0) {\n    this.boundary = boundary;\n    this.divided = false;\n    this.points = depth > 1 ? [] : null;\n    this.pointCount = 0;\n    this.drawn = false;\n    this.depth = depth;\n    if (depth === 0) {\n      // BM67 Fix on resize\n      this.subdivide();\n      this.NE.subdivide();\n      this.NW.subdivide();\n      this.SE.subdivide();\n      this.SW.subdivide();\n    }\n  }\n  addPath() {\n    const b = this.boundary;\n    ctx.rect(b.left, b.top, b.w * 2, b.h * 2);\n    this.drawn = true;\n  }\n  addToSubQuad(particle) {\n    if (this.NE.insert(particle)) {\n      return true;\n    }\n    if (this.NW.insert(particle)) {\n      return true;\n    }\n    if (this.SE.insert(particle)) {\n      return true;\n    }\n    if (this.SW.insert(particle)) {\n      return true;\n    }\n    particle.quad = undefined;\n  }\n  insert(particle) {\n    if (this.depth > 0 && !this.boundary.contains(particle)) {\n      return false;\n    }\n    if (this.depth > 1 && this.pointCount < QUADTREE_CAPACITY) {\n      this.points[this.pointCount++] = particle;\n      particle.quad = this;\n      return true;\n    }\n    if (!this.divided) {\n      this.subdivide();\n    }\n    return this.addToSubQuad(particle);\n  }\n  subdivide() {\n    if (!this.NW) {\n      const x = this.boundary.x;\n      const y = this.boundary.y;\n      const w = this.boundary.w / 2;\n      const h = this.boundary.h / 2;\n      const depth = this.depth + 1;\n      this.NE = new QuadTree(new Bounds(x + w, y - h, w, h), depth);\n      this.NW = new QuadTree(new Bounds(x - w, y - h, w, h), depth);\n      this.SE = new QuadTree(new Bounds(x + w, y + h, w, h), depth);\n      this.SW = new QuadTree(new Bounds(x - w, y + h, w, h), depth);\n    } else {\n      this.NE.pointCount = 0;\n      this.NW.pointCount = 0;\n      this.SE.pointCount = 0;\n      this.SW.pointCount = 0;\n    }\n    this.divided = true;\n  }\n  query(part, fc, found) {\n    var i = this.pointCount;\n    if (this.depth === 0 || this.boundary.near(part)) {\n      if (this.depth > 1) {\n        while (i--) {\n          const p = this.points[i];\n          if (!p.explored && part.near(p)) {\n            found[fc++] = p;\n          }\n        }\n        if (this.divided) {\n          fc = this.NE.pointCount ? this.NE.query(part, fc, found) : fc;\n          fc = this.NW.pointCount ? this.NW.query(part, fc, found) : fc;\n          fc = this.SE.pointCount ? this.SE.query(part, fc, found) : fc;\n          fc = this.SW.pointCount ? this.SW.query(part, fc, found) : fc;\n        }\n      } else if (this.divided) {\n        fc = this.NE.query(part, fc, found);\n        fc = this.NW.query(part, fc, found);\n        fc = this.SE.query(part, fc, found);\n        fc = this.SW.query(part, fc, found);\n      }\n    }\n    return fc;\n  }\n  close() {\n    if (this.divided) {\n      this.NE.close();\n      this.NW.close();\n      this.SE.close();\n      this.SW.close();\n    }\n    if (this.depth === 2 && this.divided) {\n      this.NE.pointCount = 0;\n      this.NW.pointCount = 0;\n      this.SE.pointCount = 0;\n      this.SW.pointCount = 0;\n    } else if (this.depth > 2) {\n      this.divided = false;\n    }\n  }\n}","map":{"version":3,"names":["TAU","Math","PI","QUADTREE_CAPACITY","linkBatches","mouse","x","y","linkDistance","linkDistance2","repulseDistance","particleSpeed","particleSize","bounce","quadTree","canvas","ctx","ParticlesDirective","constructor","el","number","speed","linkWidth","size","particleHex","linkHex","densityArea","particlesList","links","linkBatchAlphas","linkPool","candidates","nativeElement","style","height","width","getContext","i","push","setCanvasSize","initVariables","ngOnInit","animate","onResize","onMouseLeave","stopMouse","onTouchEnd","onMouseMove","e","setMousePos","offsetX","offsetY","onTouchMove","touches","clientX","clientY","ngOnChanges","resetParticles","scaleDensity","clearRect","updateParticles","updateLinks","animationFrame","requestAnimationFrame","bind","close","fillStyle","beginPath","p","update","fill","link","alphaIdx","p1","explored","count","query","p2","length","pop","Link","init","batchId","lineWidth","strokeStyle","l","globalAlpha","addPath","stroke","particlesNumber","Particle","QuadTree","reset","area","offsetHeight","offsetWidth","ngOnDestroy","cancelAnimationFrame","_","i0","ɵɵdirectiveInject","ElementRef","_2","selectors","hostBindings","ParticlesDirective_HostBindings","rf","ɵɵresolveWindow","ParticlesDirective_mouseleave_HostBindingHandler","ParticlesDirective_touchend_HostBindingHandler","ParticlesDirective_mousemove_HostBindingHandler","$event","ParticlesDirective_touchmove_HostBindingHandler","ParticlesDirective_change_HostBindingHandler","dx","dy","alpha","moveTo","lineTo","r","speedScale","W","H","random","vx","vy","quad","undefined","arc","near","intersects","range","xd","abs","yd","w","h","repulse","insert","drawn","dist","posX","posY","Bounds","left","right","top","bottom","diagonal","contains","boundary","depth","divided","points","pointCount","subdivide","NE","NW","SE","SW","b","rect","addToSubQuad","particle","part","fc","found"],"sources":["C:\\Users\\Consuelo\\Documents\\progetti\\portfolio\\src\\app\\particles.directive.ts"],"sourcesContent":["import { Directive, ElementRef, Input, OnDestroy, HostListener, OnInit } from \"@angular/core\";\r\n\r\n/* \r\n  Variables to be used outside of directive scope\r\n  To improve performance.\r\n*/\r\nconst TAU: number = Math.PI * 2;\r\nconst QUADTREE_CAPACITY: number = 4;\r\nlet linkBatches: number = 10;\r\nlet mouse: { x: number, y: number } = { x: 0, y: 0 };\r\n\r\n\r\n/*\r\n  Variables to be initiated\r\n*/\r\nlet linkDistance: number;\r\nlet linkDistance2: number;\r\nlet repulseDistance: number;\r\nlet particleSpeed: number;\r\nlet particleSize: number;\r\nlet bounce: boolean;\r\nlet quadTree!: QuadTree;\r\nlet canvas!: HTMLCanvasElement;\r\nlet ctx!: CanvasRenderingContext2D;\r\n\r\n\r\n\r\n@Directive({\r\n    selector: \"[repulse-particles]\"\r\n})\r\nexport class ParticlesDirective implements OnDestroy, OnInit {\r\n\r\n    @Input() number: number = 80;\r\n    @Input() speed: number = 6;\r\n    @Input() linkWidth: number = .5;\r\n    @Input() linkDistance: number = 140;\r\n    @Input() size: number = 3;\r\n    @Input() repulseDistance: number = 140;\r\n    @Input() particleHex: string = \"#FFF\";\r\n    @Input() linkHex: string = \"#FFF\";\r\n    @Input() bounce: boolean = true;\r\n    @Input() densityArea: number = 800;\r\n\r\n\r\n    particlesNumber: number | undefined;\r\n    particlesList: Particle[] = [];\r\n    links: Link[][] = [];\r\n    linkBatchAlphas: number[] = [];\r\n    linkPool: Link[] = [];\r\n    candidates: Particle[] = [];\r\n    boundary: Bounds | undefined;\r\n\r\n    animationFrame: number | undefined;\r\n\r\n    constructor(\r\n        public el: ElementRef,\r\n    ) {\r\n        canvas = this.el.nativeElement;\r\n        canvas.style.height = \"100%\";\r\n        canvas.style.width = \"100%\";\r\n        ctx = canvas.getContext(\"2d\");\r\n        for (var i = 1 / (linkBatches + 1); i < 1; i += 1 / (linkBatches + 1)) {\r\n            this.links.push([]);\r\n            this.linkBatchAlphas.push(i);\r\n        }\r\n        this.setCanvasSize();\r\n        this.initVariables();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.animate();\r\n    }\r\n\r\n    @HostListener(\"window:resize\") onResize() {\r\n        this.setCanvasSize();\r\n    }\r\n\r\n    @HostListener(\"mouseleave\") onMouseLeave() {\r\n        this.stopMouse()\r\n    }\r\n\r\n    @HostListener(\"touchend\") onTouchEnd() {\r\n        this.stopMouse()\r\n    }\r\n\r\n    @HostListener(\"mousemove\", [\"$event\"]) onMouseMove(e) {\r\n        this.setMousePos(e.offsetX, e.offsetY);\r\n    }\r\n\r\n    @HostListener(\"touchmove\", [\"$event\"]) onTouchMove(e) {\r\n        this.setMousePos(e.touches[0].clientX, e.touches[0].clientY);\r\n    }\r\n\r\n    @HostListener(\"change\") ngOnChanges() {\r\n        this.initVariables();\r\n        this.resetParticles();\r\n    }\r\n\r\n    setMousePos(x, y) {\r\n        mouse.x = x;\r\n        mouse.y = y;\r\n    }\r\n\r\n    stopMouse() {\r\n        mouse.x = null;\r\n    }\r\n\r\n    initVariables() {\r\n        linkDistance = this.linkDistance;\r\n        linkDistance2 = (0.7 * linkDistance) ** 2;\r\n        repulseDistance = this.repulseDistance;\r\n        particleSpeed = this.speed;\r\n        particleSize = this.size;\r\n        bounce = this.bounce;\r\n        if (this.densityArea) this.scaleDensity();\r\n    }\r\n\r\n\r\n    animate() {\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        this.updateParticles();\r\n        this.updateLinks();\r\n        this.animationFrame = requestAnimationFrame(this.animate.bind(this));\r\n    }\r\n\r\n    updateParticles() {\r\n        quadTree.close();\r\n        ctx.fillStyle = this.particleHex;\r\n        ctx.beginPath();\r\n        for (const p of this.particlesList) p.update(ctx, true);\r\n        ctx.fill();\r\n    }\r\n\r\n    updateLinks() {\r\n        let i: number;\r\n        let link: Link;\r\n        let alphaIdx = 0;\r\n\r\n        for (const p1 of this.particlesList) {\r\n            p1.explored = true;\r\n            const count = quadTree.query(p1, 0, this.candidates);\r\n            for (i = 0; i < count; i++) {\r\n                const p2 = this.candidates[i];\r\n                if (!p2.explored) {\r\n                    link = this.linkPool.length ? this.linkPool.pop() : new Link();\r\n                    link.init(p1, p2);\r\n                    this.links[link.batchId].push(link);\r\n                }\r\n            }\r\n        }\r\n\r\n        ctx.lineWidth = this.linkWidth;\r\n        ctx.strokeStyle = this.linkHex;\r\n        for (const l of this.links) {\r\n            ctx.globalAlpha = this.linkBatchAlphas[alphaIdx++];\r\n            ctx.beginPath();\r\n            while (l.length) this.linkPool.push(l.pop().addPath(ctx));\r\n            ctx.stroke();\r\n        }\r\n        ctx.globalAlpha = 1;\r\n    }\r\n\r\n    resetParticles() {\r\n        this.particlesList = [];\r\n        for (let i = 0; i < this.particlesNumber; i++) {\r\n            this.particlesList.push(new Particle(canvas, particleSize))\r\n        }\r\n        quadTree = new QuadTree();\r\n        for (const p of this.particlesList) p.reset(canvas);\r\n    }\r\n\r\n    scaleDensity() {\r\n        var area = canvas.width * canvas.height / 1000;\r\n        this.particlesNumber = (area * this.number / this.densityArea) | 0;\r\n    }\r\n\r\n    setCanvasSize() {\r\n        canvas.height = canvas.offsetHeight;\r\n        canvas.width = canvas.offsetWidth;\r\n        if (this.densityArea) this.scaleDensity();\r\n        this.resetParticles();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        cancelAnimationFrame(this.animationFrame);\r\n    }\r\n}\r\n\r\nclass Link {\r\n    p1: Particle;\r\n    p2: Particle;\r\n    alpha: number;\r\n    batchId: number;\r\n    constructor() { }\r\n    init(p1: Particle, p2: Particle) {\r\n        this.p1 = p1;\r\n        this.p2 = p2;\r\n        const dx = p1.x - p2.x;\r\n        const dy = p1.y - p2.y;\r\n        this.alpha = 1 - (dx * dx + dy * dy) / linkDistance2;\r\n        this.batchId = this.alpha * linkBatches | 0;\r\n        this.batchId = this.batchId >= linkBatches ? linkBatches : this.batchId;\r\n    }\r\n    addPath(ctx) {\r\n        ctx.moveTo(this.p1.x, this.p1.y);\r\n        ctx.lineTo(this.p2.x, this.p2.y);\r\n        return this;\r\n    }\r\n\r\n}\r\n\r\n\r\nclass Particle {\r\n    r: number;\r\n    speedScale: number;\r\n    x: number;\r\n    y: number;\r\n    vx: number;\r\n    vy: number;\r\n    quad: QuadTree;\r\n    explored: boolean;\r\n    constructor(canvas, r) {\r\n        this.r = r;\r\n        this.speedScale = particleSpeed / 2;\r\n        this.reset(canvas, r);\r\n    }\r\n    reset(canvas, r = this.r) {\r\n        const W = canvas.width - r * 2;\r\n        const H = canvas.height - r * 2;\r\n        this.x = Math.random() * W + r;\r\n        this.y = Math.random() * H + r;\r\n        this.vx = Math.random() - 0.5;\r\n        this.vy = Math.random() - 0.5;\r\n        this.quad = undefined;\r\n        this.explored = false;\r\n\r\n    }\r\n    addPath(ctx) {\r\n        ctx.moveTo(this.x + this.r, this.y);\r\n        ctx.arc(this.x, this.y, this.r, 0, TAU);\r\n    }\r\n    near(p) {\r\n        return ((p.x - this.x) ** 2 + (p.y - this.y) ** 2) <= linkDistance2;\r\n    }\r\n    intersects(range) {\r\n        const xd = Math.abs(range.x - this.x);\r\n        const yd = Math.abs(range.y - this.y);\r\n        const r = linkDistance;\r\n        const w = range.w;\r\n        const h = range.h;\r\n        if (xd > r + w || yd > r + h) { return false }\r\n        if (xd <= w || yd <= h) { return true }\r\n        return ((xd - w) ** 2 + (yd - h) ** 2) <= linkDistance2;\r\n\r\n    }\r\n    update(ctx, repulse = true) {\r\n        this.explored = false;\r\n        const r = this.r;\r\n        let W, H;\r\n        this.x += this.vx * this.speedScale;\r\n        this.y += this.vy * this.speedScale;\r\n\r\n        if (bounce) {\r\n            W = ctx.canvas.width - r;\r\n            H = ctx.canvas.height - r;\r\n            if (this.x > W || this.x < 0) {\r\n                this.vx = -this.vx;\r\n            }\r\n            if (this.y > H || this.y < 0) {\r\n                this.vy = -this.vy;\r\n            }\r\n        } else {\r\n            W = ctx.canvas.width + r;\r\n            H = ctx.canvas.height + r;\r\n            if (this.x > W) {\r\n                this.x = 0;\r\n                this.y = Math.random() * (H - r);\r\n            } else if (this.x < -r) {\r\n                this.x = W - r;\r\n                this.y = Math.random() * (H - r);\r\n            }\r\n            if (this.y > H) {\r\n                this.y = 0\r\n                this.x = Math.random() * (W - r);\r\n            } else if (this.y < -r) {\r\n                this.y = H - r;\r\n                this.x = Math.random() * (W - r);\r\n            }\r\n        }\r\n        repulse && mouse.x && this.repulse();\r\n        this.addPath(ctx);\r\n        quadTree.insert(this);\r\n        this.quad && (this.quad.drawn = false)\r\n    }\r\n    repulse() {\r\n        var dx = this.x - mouse.x;\r\n        var dy = this.y - mouse.y;\r\n\r\n        const dist = (dx * dx + dy * dy) ** 0.5;\r\n        var rf = ((1 - (dist / repulseDistance) ** 2) * 100);\r\n        rf = (rf < 0 ? 0 : rf > 50 ? 50 : rf) / dist;\r\n\r\n        var posX = this.x + dx * rf;\r\n        var posY = this.y + dy * rf;\r\n\r\n        if (bounce) {\r\n            if (posX - particleSize > 0 && posX + particleSize < canvas.width) this.x = posX;\r\n            if (posY - particleSize > 0 && posY + particleSize < canvas.height) this.y = posY;\r\n        } else {\r\n            this.x = posX;\r\n            this.y = posY;\r\n        }\r\n    }\r\n}\r\n\r\nclass Bounds {\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n    h: number;\r\n    left: number;\r\n    right: number;\r\n    top: number;\r\n    bottom: number;\r\n    diagonal: number;\r\n    constructor(x, y, w, h) { this.init(x, y, w, h) }\r\n    init(x, y, w, h) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.w = w;\r\n        this.h = h;\r\n        this.left = x - w;\r\n        this.right = x + w;\r\n        this.top = y - h;\r\n        this.bottom = y + h;\r\n        this.diagonal = (w * w + h * h);\r\n    }\r\n\r\n    contains(p) {\r\n        return (p.x >= this.left && p.x <= this.right && p.y >= this.top && p.y <= this.bottom);\r\n    }\r\n\r\n    near(p) {\r\n        if (!this.contains(p)) {\r\n            const dx = p.x - this.x;\r\n            const dy = p.y - this.y;\r\n            const dist = (dx * dx + dy * dy) - this.diagonal - linkDistance2;\r\n            return dist < 0;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nclass QuadTree {\r\n    boundary: Bounds;\r\n    divided: boolean;\r\n    points: Particle[];\r\n    pointCount: number;\r\n    drawn: boolean;\r\n    depth: number;\r\n\r\n    NE: QuadTree;\r\n    NW: QuadTree;\r\n    SE: QuadTree;\r\n    SW: QuadTree;\r\n    constructor(boundary: Bounds = new Bounds(canvas.width / 2, canvas.height / 2, canvas.width / 2, canvas.height / 2), depth = 0) {\r\n        this.boundary = boundary;\r\n        this.divided = false;\r\n        this.points = depth > 1 ? [] : null;\r\n        this.pointCount = 0\r\n        this.drawn = false;\r\n        this.depth = depth;\r\n        if (depth === 0) {   // BM67 Fix on resize\r\n            this.subdivide();\r\n            this.NE.subdivide();\r\n            this.NW.subdivide();\r\n            this.SE.subdivide();\r\n            this.SW.subdivide();\r\n        }\r\n    }\r\n\r\n    addPath() {\r\n        const b = this.boundary;\r\n        ctx.rect(b.left, b.top, b.w * 2, b.h * 2);\r\n        this.drawn = true;\r\n    }\r\n    addToSubQuad(particle) {\r\n        if (this.NE.insert(particle)) { return true }\r\n        if (this.NW.insert(particle)) { return true }\r\n        if (this.SE.insert(particle)) { return true }\r\n        if (this.SW.insert(particle)) { return true }\r\n        particle.quad = undefined;\r\n    }\r\n    insert(particle) {\r\n        if (this.depth > 0 && !this.boundary.contains(particle)) { return false }\r\n\r\n        if (this.depth > 1 && this.pointCount < QUADTREE_CAPACITY) {\r\n            this.points[this.pointCount++] = particle;\r\n            particle.quad = this;\r\n            return true;\r\n        }\r\n        if (!this.divided) { this.subdivide() }\r\n        return this.addToSubQuad(particle);\r\n    }\r\n\r\n    subdivide() {\r\n        if (!this.NW) {\r\n            const x = this.boundary.x;\r\n            const y = this.boundary.y;\r\n            const w = this.boundary.w / 2;\r\n            const h = this.boundary.h / 2;\r\n            const depth = this.depth + 1;\r\n\r\n            this.NE = new QuadTree(new Bounds(x + w, y - h, w, h), depth);\r\n            this.NW = new QuadTree(new Bounds(x - w, y - h, w, h), depth);\r\n            this.SE = new QuadTree(new Bounds(x + w, y + h, w, h), depth);\r\n            this.SW = new QuadTree(new Bounds(x - w, y + h, w, h), depth);\r\n        } else {\r\n            this.NE.pointCount = 0;\r\n            this.NW.pointCount = 0;\r\n            this.SE.pointCount = 0;\r\n            this.SW.pointCount = 0;\r\n        }\r\n\r\n        this.divided = true;\r\n    }\r\n    query(part, fc, found) {\r\n        var i = this.pointCount;\r\n        if (this.depth === 0 || this.boundary.near(part)) {\r\n            if (this.depth > 1) {\r\n                while (i--) {\r\n                    const p = this.points[i];\r\n                    if (!p.explored && part.near(p)) { found[fc++] = p }\r\n                }\r\n                if (this.divided) {\r\n                    fc = this.NE.pointCount ? this.NE.query(part, fc, found) : fc;\r\n                    fc = this.NW.pointCount ? this.NW.query(part, fc, found) : fc;\r\n                    fc = this.SE.pointCount ? this.SE.query(part, fc, found) : fc;\r\n                    fc = this.SW.pointCount ? this.SW.query(part, fc, found) : fc;\r\n                }\r\n            } else if (this.divided) {\r\n                fc = this.NE.query(part, fc, found);\r\n                fc = this.NW.query(part, fc, found);\r\n                fc = this.SE.query(part, fc, found);\r\n                fc = this.SW.query(part, fc, found);\r\n            }\r\n        }\r\n        return fc;\r\n    }\r\n\r\n    close() {\r\n        if (this.divided) {\r\n            this.NE.close();\r\n            this.NW.close();\r\n            this.SE.close();\r\n            this.SW.close();\r\n        }\r\n\r\n        if (this.depth === 2 && this.divided) {\r\n            this.NE.pointCount = 0;\r\n            this.NW.pointCount = 0;\r\n            this.SE.pointCount = 0;\r\n            this.SW.pointCount = 0;\r\n        } else if (this.depth > 2) {\r\n            this.divided = false;\r\n        }\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}